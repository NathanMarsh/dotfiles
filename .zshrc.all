
alias less='less -r'
alias glsync='clear && watch "git pull && git add . && git commit -am Blah && git push"'

alias run-background='TMUX="" tmux -S /tmp/bg new -d "$@"'
alias list_to_cs='awk -vORS=, "{ print $1 }" | sed "s/,$/\n/"'
alias connected_ports='lsof -i'

alias ga='git-annex'

export EDITOR="vi"

#alias jsonpretty="python -mjson.tool"

# time head -c 100000000 /dev/zero | shasum -a 512 ## finds speed of sha 512
#
#


alias gp='git push'
alias gc='git commit'
alias gca='git commit -a'
alias gcm='git commit -m'
alias gcam='git commit -am'
alias gits='git status'
alias gb='git branch'

alias grep='grep --color=always'

#alias no-internet='sg no-internet'


function gitdiff {
    value="vimdiff =(git show HEAD~1:$1) =(git show HEAD:$1)"
    `$value`
}

bindkey -M vicmd v edit-command-line

#bindkey -v
#bindkey '\e[3~' delete-char
bindkey '^R' history-incremental-search-backward

alias column-csv='column -s "," -t'

function cless {
    if [ ! -z "$1" ]
    then 
        source-highlight -i $1 -o STDOUT --out-format esc | less -r
    fi
}

autoload -U edit-command-line
zle -N edit-command-line

bindkey -M vicmd v edit-command-line

bindkey -v

#function mkcd {
#    if [ $# = 0 ] 
#    then 
#            echo No Folder name given
#
#    elif  [ -d $1 ]	
#    then 
#                    echo Folder already exists 
#                    cd $1
#    else
##                    echo Creating a new folder
#                    mkdir  -p $1
#                    cd $1	
#    fi
#}

precmd() {
}

#PROMPT="[%{$fg[red]%}%n%{$reset_color%}@%{$fg[blue]%}%m:%{$fg_no_bold[yellow]%}%/] %{$reset_color%}%#"
#RPROMPT="[%{$fg_no_bold[yellow]%}%?%{$reset_color%}]"


if test -z "$CUSTOMSHELL"
then
  PROMPT="[%{$fg[red]%}%n%{$reset_color%}@%{$fg[blue]%}%m]%{$reset_color%} "
  RPROMPT="%{$fg_no_bold[yellow]%}%/%{$reset_color%}"
fi


# Uncomment for clock here
#setopt PROMPT_SUBST
#PROMPT='%B%F{red}%n@%m%f%F{yellow}[%D{%L:%M:%S}]%f:%F{blue}${${(%):-%~}}%f$ %b'
#PROMPT="[%{$fg[red]%}%n%{$reset_color%}@%{$fg[blue]%}%m:%{$fg_no_bold[yellow]%}%/]:[%D{%L:%M:%S}] %{$reset_color%}%#"
#PROMPT="%{$fg[red]%}%n%{$reset_color%}@%{$fg[blue]%}%m%{$fg_no_bold[yellow]%}[%D{%L:%M:%S}] %{$reset_color%}"
#TMOUT=1

#TRAPALRM() {
#    zle reset-prompt
#}

mkcd() {
  if [ ! -z "$1" ]
  then
    echo "Got input $1"
    if [ -d "$1" ]
    then
      echo "Folder already exists"
      cd "$1"
    else
      echo "Creating a new folder $1"
      mkdir -p "$1"
      cd "$1"
    fi
  else
    echo "Got no input, creating a temporary directory"
    tempdir=`mktemp -d`
    cd "$tempdir"
  fi 
    
}


git-temp() {
        tdir=`mktemp -d` 
        echo "$tdir"
        commit_id=`/usr/bin/git rev-parse HEAD` 
        tempdir="$tdir/$commit_id" 
        mkdir "$tempdir"
        /usr/bin/git diff-index --quiet HEAD
        ret=$? 
        if [ $ret -eq 0 ]
        then
                echo "Its clean, proceeding"
        else
                echo "Its dirty, not proceeding"
                return
        fi
        commit_needed="HEAD" 
        if [ ! -z "$1" ]
        then
                commit_needed="$1" 
        fi
        echo "Going with $commit_needed"
        git --work-tree "$tempdir" checkout -f "$commit_needed"
        cd "$tempdir"
}

alias ls='ls --color=auto'

### Try to fix zshrc up-line-history thing in ubuntu/debian ####

#export TERM=rxvt-unicode

#[[ -z "$terminfo[cuu1]" ]] || bindkey -M viins "$terminfo[cuu1]" vi-up-line-or-history
#[[ -z "$terminfo[kcuu1]" ]] || bindkey -M viins "$terminfo[kcuu1]" vi-up-line-or-history

#[[ -z "$terminfo[cuu1]" ]] || bindkey -M viins "$terminfo[cuu1]" vi-up-line
#[[ -z "$terminfo[kcuu1]" ]] || bindkey -M viins "$terminfo[kcuu1]" vi-up-line
#[[ "$terminfo[kcuu1]" == ""* ]] && bindkey -M viins "${terminfo[kcuu1]/O/[}" vi-up-line

autoload -Uz up-line-or-beginning-search
autoload -Uz down-line-or-beginning-search
zle -N up-line-or-beginning-search up-line-or-beginning-search
zle -N down-line-or-beginning-search down-line-or-beginning-search
bindkey -v
bindkey "^[[A" up-line-or-beginning-search
bindkey "^[[B" down-line-or-beginning-search

#[[ -z "$terminfo[kcuu1]" ]] || bindkey -M viins "$terminfo[kcuu1]" vi-up-line-or-history
#[[ -z "$terminfo[kcud1]" ]] || bindkey -M viins "$terminfo[kcud1]" vi-down-line-or-history

# [...] and fixups for ncurses' application mode:
#[[ "$terminfo[kcuu1]" == ""* ]] && bindkey -M viins "${terminfo[kcuu1]/O/[}" vi-up-line-or-history
#[[ "$terminfo[kcud1]" == ""* ]] && bindkey -M viins "${terminfo[kcud1]/O/[}" vi-down-line-or-history

#http://comments.gmane.org/gmane.comp.shells.zsh.user/9835
#http://comments.gmane.org/gmane.comp.shells.zsh.user/9836
#http://blog.gmane.org/gmane.comp.shells.zsh.user/month=20050101
#http://serverfault.com/questions/359277/linux-terminal-change-cursor-position-after-up-arrow-key-press
#### ###


#export TZ=US/Pacific
#export TZ="/usr/share/zoneinfo/US/Pacific"
